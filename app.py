import streamlit as st
import fitz  # PyMuPDF
from openai import OpenAI
from io import BytesIO
from PIL import Image
import pytesseract
import re

# Mise √† jour de la base des prestations
base_prestations = {
    "Assura": {"dentaire": 1500, "hospitalisation": "Mi-priv√©e", "checkup": False, "etranger": False},
    "Sympany": {"dentaire": 5000, "hospitalisation": "Priv√©e", "checkup": True, "etranger": True},
    "Groupe Mutuel": {"dentaire": 10000, "hospitalisation": "Priv√©e", "checkup": True, "etranger": True},
    "Visana": {"dentaire": 8000, "hospitalisation": "Flex", "checkup": True, "etranger": True},
    "Concordia": {"dentaire": 2000, "hospitalisation": "LIBERO", "checkup": True, "etranger": True},
    "SWICA": {"dentaire": 3000, "hospitalisation": "Priv√©e", "checkup": True, "etranger": True},
    "Helsana": {"dentaire": 10000, "hospitalisation": "Priv√©e", "checkup": True, "etranger": True},
    "CSS": {"dentaire": 4000, "hospitalisation": "Priv√©e", "checkup": True, "etranger": True},
    "Sanitas": {"dentaire": 4000, "hospitalisation": "Top Liberty", "checkup": True, "etranger": True}
}

def calculer_score_utilisateur(texte, preference):
    texte = texte.lower()
    score = {nom: 0 for nom in base_prestations.keys()}
    has_lamal = "lamal" in texte or "base" in texte

    if "dentaire" in texte:
        for nom in score:
            if base_prestations[nom]["dentaire"] >= 3000:
                score[nom] += 2

    if "priv√©e" in texte:
        for nom in score:
            if "priv√©e" in base_prestations[nom]["hospitalisation"].lower():
                score[nom] += 2

    if "check-up" in texte or "fitness" in texte:
        for nom in score:
            if base_prestations[nom]["checkup"]:
                score[nom] += 1

    if "√©tranger" in texte:
        for nom in score:
            if base_prestations[nom]["etranger"]:
                score[nom] += 2

    if preference == "üìâ R√©duire les co√ªts":
        score["Assura"] += 3
    elif preference == "üìà Am√©liorer les prestations":
        for nom in score:
            score[nom] += 1

    return sorted(score.items(), key=lambda x: x[1], reverse=True), has_lamal

def detect_doublons_prestations(textes):
    prestations_cle = ["dentaire", "orthodontie", "hospitalisation", "m√©decine alternative", "lunettes"]
    all_lines = []
    prest_detect = []

    for texte in textes:
        lignes = texte.lower().split('\n')
        prestations = [l for l in lignes if any(p in l for p in prestations_cle)]
        all_lines.append(set(prestations))

    # Comparaison entre contrats
    doublons = set()
    for i in range(len(all_lines)):
        for j in range(i + 1, len(all_lines)):
            doublons.update(all_lines[i].intersection(all_lines[j]))

    return list(doublons)
# --- UI de l'application ---
st.set_page_config(page_title="Analyseur IA - Contrats Sant√©", layout="centered")
st.title("üß† Assistant IA pour vos Contrats Sant√©")

st.markdown("""
Bienvenue dans votre assistant sant√© intelligent, con√ßu pour :
- **D√©tecter les doublons de prestations compl√©mentaires**
- **Analyser la couverture LAMal, LCA et Hospitalisation**
- **Fournir une explication claire, p√©dagogique et personnalis√©e**
""")

api_key = st.text_input("Entrez votre cl√© secr√®te pour commencer l‚Äôanalyse :", type="password")
if not api_key:
    st.stop()

try:
    client = OpenAI(api_key=api_key)
    client.models.list()
    st.success("Cl√© valid√©e. Analyse pr√™te.")
except Exception:
    st.error("Cl√© invalide. Merci de v√©rifier.")
    st.stop()

objectif = st.radio("Quel est votre objectif ?", ["üìâ R√©duire les co√ªts", "üìà Am√©liorer les prestations", "‚ùì Je ne sais pas encore"])
travail = st.radio("Travaillez-vous au moins 8h/semaine ?", ["Oui", "Non"], index=0)
uploaded_files = st.file_uploader("üìÑ Importez jusqu'√† 3 fichiers (PDF / images)", type=["pdf", "jpg", "jpeg", "png"], accept_multiple_files=True)

if not uploaded_files:
    st.stop()

st.markdown("---")
contract_texts = []
for i, file in enumerate(uploaded_files):
    st.subheader(f"üìÑ Contrat {i+1}")
    if file.type.startswith("image"):
        st.image(file, caption="Aper√ßu du document")
        image = Image.open(file)
        texte = pytesseract.image_to_string(image)
    else:
        doc = fitz.open(stream=file.read(), filetype="pdf")
        texte = "\n".join([page.get_text() for page in doc])
    contract_texts.append(texte)
    with st.spinner("ü§ñ Analyse IA en cours..."):
        prompt = f"""
Tu es un expert en assurance sant√© suisse. Voici un contrat √† analyser.

Analyse les √©l√©ments suivants de fa√ßon structur√©e et p√©dagogique :
1. **LAMal** : couverture de base, montants, franchises, √©l√©ments manquants.
2. **LCA (compl√©mentaire)** : prestations suppl√©mentaires, m√©decine alternative, remboursement lunettes/dentaire, etc.
3. **Hospitalisation** : type de chambre, libert√© de choix, montants.

Indique s'il manque la LAMal (et donc que l‚Äôassurance est incompl√®te).
Explique clairement les garanties d√©tect√©es sous forme de points, en mettant en √©vidence les montants importants.
Puis, fournis une note globale sur 10 avec ton raisonnement.

Texte : {texte[:3000]}
"""
        try:
            response = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Tu es un conseiller expert et bienveillant en assurance sant√© suisse."},
                    {"role": "user", "content": prompt}
                ]
            )
            analyse = response.choices[0].message.content
            st.markdown(analyse, unsafe_allow_html=True)
        except Exception as e:
            st.error("Erreur d‚Äôanalyse IA")

# -- Score automatique et remarques
note = 0
for txt in contract_texts:
    txt_lower = txt.lower()
    if any(k in txt_lower for k in ["lamal", "base", "obligatoire"]):
        note += 2
    if any(k in txt_lower for k in ["compl√©mentaire", "lca"]):
        note += 3
    if any(k in txt_lower for k in ["hospitalisation", "priv√©e", "demi-priv√©e"]):
        note += 1
    if any(k in txt_lower for k in ["dentaire", "lunettes", "fitness", "m√©decine alternative"]):
        note += 1

note = min(note, 10)

st.markdown(f"""
<div style='background-color:#f4f4f4;padding:1em;border-radius:10px;margin-top:1em;'>
<h4>üßæ R√©sultat global de votre couverture</h4>
<p><strong>Note finale :</strong> {note}/10</p>
<p>{'‚ùóÔ∏èAbsence de LAMal d√©tect√©e : pensez √† v√©rifier votre couverture de base obligatoire.' if note < 3 else '‚úÖ Une couverture est d√©tect√©e, v√©rifiez les d√©tails ci-dessus.'}</p>
</div>
""", unsafe_allow_html=True)

# -- Doublons r√©els sur prestations uniquement
prestations_cl√©s = ["dentaire", "lunettes", "hospitalisation", "m√©decine", "orthodontie"]
doublons_presta = {}
for p in prestations_cl√©s:
    count = sum(p in c.lower() for c in contract_texts)
    if count > 1:
        doublons_presta[p] = count

if doublons_presta:
    st.markdown("""
<div style='background-color:#fff3cd;border-left: 6px solid #ffa502;padding: 1em;border-radius: 10px;margin-top:1em;'>
<h4>‚ö†Ô∏è Doublons de garanties compl√©mentaires d√©tect√©s</h4>
<p>Les prestations suivantes apparaissent plusieurs fois :</p>
<ul>""" + "".join(f"<li><strong>{k}</strong> : pr√©sente dans {v} contrats</li>" for k, v in doublons_presta.items()) + """</ul>
<p><strong>Recommandation :</strong> R√©duisez ou regroupez les couvertures similaires pour √©viter de payer en double.</p>
</div>
""", unsafe_allow_html=True)
else:
    st.success("‚úÖ Aucune redondance majeure de prestations compl√©mentaires d√©tect√©e.")

# -- Chat IA final
st.markdown("---")
st.subheader("üí¨ Posez vos questions sur vos contrats")
q = st.text_area("Question libre √† l‚ÄôIA")
if st.button("Envoyer"):
    if q:
        try:
            reponse = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Tu r√©ponds comme un conseiller assurance sant√© bienveillant et pr√©cis."},
                    {"role": "user", "content": q}
                ]
            )
            st.markdown(f"**R√©ponse IA :**\n\n{reponse.choices[0].message.content}")
        except Exception:
            st.error("Erreur lors de la r√©ponse IA.")
