import streamlit as st
import fitz  # PyMuPDF
from openai import OpenAI
from fpdf import FPDF
import base64
import smtplib
from email.message import EmailMessage
from io import BytesIO
from PIL import Image
import pytesseract
import re

# --- Donn√©es de base pour analyse des caisses ---
base_prestations = {
    "Assura": {"dentaire": 1500, "hospitalisation": "Mi-priv√©e", "m√©decine": True, "checkup": False, "etranger": False},
    "Sympany": {"dentaire": 5000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True, "etranger": True},
    "Groupe Mutuel": {"dentaire": 10000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True, "etranger": True},
    "Visana": {"dentaire": 8000, "hospitalisation": "Flex", "m√©decine": True, "checkup": True, "etranger": True},
    "Concordia": {"dentaire": 2000, "hospitalisation": "LIBERO", "m√©decine": True, "checkup": True, "etranger": True},
    "SWICA": {"dentaire": 3000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True, "etranger": True},
    "Helsana": {"dentaire": 10000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True, "etranger": True},
    "CSS": {"dentaire": 4000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True, "etranger": True},
    "Sanitas": {"dentaire": 4000, "hospitalisation": "Top Liberty", "m√©decine": True, "checkup": True, "etranger": True}
}

# --- Scoring personnalis√© ---
def calculer_score_utilisateur(texte_pdf, preference):
    texte = texte_pdf.lower()
    score = {nom: 0 for nom in base_prestations.keys()}

    if "dentaire" in texte:
        for nom in score:
            if base_prestations[nom].get("dentaire", 0) >= 5000:
                score[nom] += 2
        if "1500" in texte:
            score["Assura"] += 1

    if "priv√©e" in texte or "top liberty" in texte:
        for nom in score:
            if "priv√©e" in base_prestations[nom]["hospitalisation"].lower():
                score[nom] += 2

    if "m√©decine alternative" in texte or "m√©decine naturelle" in texte:
        for nom in score:
            if base_prestations[nom]["m√©decine"]:
                score[nom] += 1

    if "check-up" in texte or "bilan sant√©" in texte or "fitness" in texte:
        for nom in score:
            if base_prestations[nom]["checkup"]:
                score[nom] += 1

    if "√©tranger" in texte:
        for nom in score:
            if base_prestations[nom]["etranger"]:
                score[nom] += 2

    if preference == "üìâ R√©duire les co√ªts":
        score["Assura"] += 3
    elif preference == "üìà Am√©liorer les prestations":
        for nom in score:
            score[nom] += 1

    return sorted(score.items(), key=lambda x: x[1], reverse=True)
# --- D√©tection avanc√©e des doublons ---
def detect_doublons_prestations(texts):
    prestations_keywords = ["dentaire", "orthodontie", "lunettes", "hospitalisation", "m√©decine", "check-up", "√©tranger"]
    exclusions = ["accident", "conditions", "√©dition", "adresse", "famille", "police", "document", "date", "case postale"]
    seen_by_file = []
    doublons_detect√©s = []
    explications = []

    for idx, texte in enumerate(texts):
        lignes = [l.strip().lower() for l in texte.split('\n') if len(l.strip()) > 10]
        prestations = [l for l in lignes if any(k in l for k in prestations_keywords) and not any(e in l for e in exclusions)]
        seen_by_file.append(set(prestations))

        # Doublons internes
        uniques = set()
        for p in prestations:
            if p in uniques:
                explications.append(f"üîÅ Doublon interne dans Contrat {idx+1} : ¬´ {p[:60]}... ¬ª")
                doublons_detect√©s.append(p)
            else:
                uniques.add(p)

    # Doublons entre contrats
    for i in range(len(seen_by_file)):
        for j in range(i + 1, len(seen_by_file)):
            communs = seen_by_file[i].intersection(seen_by_file[j])
            for doublon in communs:
                explications.append(f"üîÅ Doublon entre Contrat {i+1} et Contrat {j+1} : ¬´ {doublon[:60]}... ¬ª")
                doublons_detect√©s.append(doublon)

    return list(set(doublons_detect√©s)), explications
# --- UI principale ---
st.set_page_config(page_title="Comparateur IA de contrats sant√©", layout="centered")
st.title("üß† Assistant Intelligent de Contrats Sant√©")

st.markdown("""
Ce service vous aide √† :
- üìñ Lire clairement vos contrats d'assurance
- üîé D√©tecter les doublons de garanties
- ü§ñ Obtenir une analyse intelligente personnalis√©e
""")

# √âtape 1 : Authentification
api_key = st.text_input("üîê Entrez votre cl√© OpenAI :", type="password")
if not api_key:
    st.stop()
client = OpenAI(api_key=api_key)

# √âtape 2 : Objectif
objectif = st.radio("üéØ Votre objectif ?", ["üìâ R√©duire les co√ªts", "üìà Am√©liorer les prestations", "‚ùì Je ne sais pas encore"], index=2)

# √âtape 3 : Situation
travail = st.radio("üë§ Travaillez-vous 8h+/semaine ?", ["Oui", "Non"], index=0)

# √âtape 4 : T√©l√©versement des contrats
uploaded_files = st.file_uploader("üìÑ T√©l√©versez vos fichiers PDF ou photos (max 3)", type=["pdf", "jpg", "jpeg", "png"], accept_multiple_files=True)

if not uploaded_files:
    st.info("üìÇ Veuillez t√©l√©verser au moins un contrat.")
    st.stop()

textes_contracts = []
for i, file in enumerate(uploaded_files):
    st.markdown(f"### üìò Contrat {i+1}")
    if file.type.startswith("image"):
        st.image(file)
        image = Image.open(file)
        text = pytesseract.image_to_string(image)
    else:
        buffer = BytesIO(file.read())
        doc = fitz.open(stream=buffer.read(), filetype="pdf")
        text = "\n".join(page.get_text() for page in doc)
    textes_contracts.append(text)
    with st.spinner("üß† Analyse IA en cours..."):
        prompt = f"""Tu es un conseiller expert en assurance sant√©.
Analyse ce contrat en 3 parties :
1. LAMal : indique si pr√©sente ou absente, franchise et remboursement.
2. LCA : prestations compl√©mentaires (dentaire, m√©decines alternatives, √©tranger‚Ä¶).
3. Hospitalisation : type de chambre et prestations.

Explique simplement, note la couverture globale sur 10. Voici le texte :

{text[:3000]}"""
        try:
            completion = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "Tu es un conseiller assurance bienveillant et synth√©tique."},
                    {"role": "user", "content": prompt}
                ]
            )
            analyse = completion.choices[0].message.content
            st.markdown(analyse)

            note = 0
            has_lamal = any(kw in text.lower() for kw in ["lamal", "assurance de base", "obligatoire", "franchise"])
            has_lca = any(kw in text.lower() for kw in ["compl√©mentaire", "dentaire", "lunettes", "m√©decine alternative"])
            has_hosp = any(kw in text.lower() for kw in ["hospitalisation", "mi-priv√©e", "priv√©e", "chambre"])

            if has_lamal: note += 2
            if has_lca: note += 3
            if has_hosp: note += 2
            if "√©tranger" in text.lower() or "lunettes" in text.lower(): note += 1
            if note >= 7 and not has_lamal:
                note = 3  # Pas de LAMal = faible couverture malgr√© les compl√©mentaires

            st.markdown(f"""
<div style='background-color:#eef2f7;padding:1em;border-radius:10px;margin-top:1em;'>
<strong>Note finale :</strong> {note}/10<br>
{"<span style='color:red;'>‚ö†Ô∏è LAMal absente !</span><br>" if not has_lamal else ""}
<span style='font-size:0.9em;'>Une couverture optimale commence √† 6/10, incluant LAMal + compl√©mentaire + hospitalisation.</span>
</div>
""", unsafe_allow_html=True)
        except Exception as e:
            st.warning(f"Erreur d‚Äôanalyse IA : {e}")
        # Doublons sur les prestations LCA uniquement
        prestations_cl√©s = ["dentaire", "hospitalisation", "lunettes", "alternative", "√©tranger"]
        resume_prestations = []

        for txt in contract_texts:
            resume_prestations.append({k: any(k in txt.lower() for k in [k]) for k in prestations_cl√©s})

        doublons_detect√©s = []
        for i in range(len(resume_prestations)):
            for j in range(i + 1, len(resume_prestations)):
                communs = [k for k in prestations_cl√©s if resume_prestations[i][k] and resume_prestations[j][k]]
                if communs:
                    doublons_detect√©s.append((i + 1, j + 1, communs))

        if doublons_detect√©s:
            st.markdown("<hr>", unsafe_allow_html=True)
            st.markdown("### üîÅ Doublons d√©tect√©s entre vos contrats :", unsafe_allow_html=True)
            for d in doublons_detect√©s:
                st.markdown(f"- Contrat {d[0]} et Contrat {d[1]} : **{', '.join(d[2]).capitalize()}**", unsafe_allow_html=True)
            st.info("üí° Pensez √† regrouper vos prestations similaires dans une seule assurance compl√©mentaire pour √©viter de payer deux fois.")
        else:
            st.success("‚úÖ Aucun doublon d√©tect√© sur les prestations compl√©mentaires.")

        # Chat final avec IA
        st.markdown("---")
        st.markdown("### üí¨ Posez une question √† notre assistant IA")
        question_utilisateur = st.text_area("‚úçÔ∏è Votre question ici (ex : Que puis-je supprimer ? Quelle est ma meilleure couverture ?)")
        if st.button("Obtenir une r√©ponse"):
            if question_utilisateur.strip():
                try:
                    reponse = client.chat.completions.create(
                        model="gpt-4",
                        messages=[
                            {"role": "system", "content": "Tu es un conseiller en assurance suisse, clair et bienveillant. Tu r√©ponds en fonction du contenu du contrat analys√©."},
                            {"role": "user", "content": question_utilisateur}
                        ]
                    )
                    st.markdown("#### ü§ñ R√©ponse IA :", unsafe_allow_html=True)
                    st.markdown(reponse.choices[0].message.content)
                except Exception as e:
                    st.error(f"Erreur lors de la r√©ponse IA : {e}")
            else:
                st.warning("‚ö†Ô∏è Veuillez saisir une question.")

        # Fin
        st.markdown("---")
        st.info("üì© Une question ? Contactez-nous √† info@monfideleconseiller.ch")
