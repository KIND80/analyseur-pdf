import streamlit as st
import fitz  # PyMuPDF
from openai import OpenAI
from io import BytesIO
from PIL import Image
import pytesseract
import re
import smtplib
from email.message import EmailMessage

# --- Donn√©es de r√©f√©rence enrichies pour scoring ---
base_prestations = {
    "Assura": {
        "dentaire": 1500, "hospitalisation": "Mi-priv√©e", "m√©decine": True, "checkup": False,
        "etranger": False, "tarif": 494.8, "franchise": 2500
    },
    "Sanitas": {
        "dentaire": 4000, "hospitalisation": "Top Liberty", "m√©decine": True, "checkup": True,
        "etranger": True, "tarif": 559.5, "franchise": 2500
    },
    "Visana": {
        "dentaire": 8000, "hospitalisation": "Flex", "m√©decine": True, "checkup": True,
        "etranger": True, "tarif": 614.1, "franchise": 2500
    },
    "CSS": {
        "dentaire": 4000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True,
        "etranger": True, "tarif": 563.3, "franchise": 2500
    },
    "Groupe Mutuel": {
        "dentaire": 10000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True,
        "etranger": True, "tarif": 582.6, "franchise": 2500
    },
    "Helsana": {
        "dentaire": 10000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True,
        "etranger": True, "tarif": 529.9, "franchise": 2500
    },
    "SWICA": {
        "dentaire": 3000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True,
        "etranger": True, "tarif": 544.2, "franchise": 2500
    },
    "Sympany": {
        "dentaire": 5000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True,
        "etranger": True, "tarif": 516.9, "franchise": 2500
    },
    "Concordia": {
        "dentaire": 2000, "hospitalisation": "LIBERO", "m√©decine": True, "checkup": True,
        "etranger": True, "tarif": 536.6, "franchise": 2500
    }
}

# --- Configuration de l'app Streamlit ---
st.set_page_config(page_title="Assistant IA Assurance Sant√©", layout="centered")

st.title("üß† Assistant IA - Analyse de vos contrats d‚Äôassurance sant√©")

st.markdown("""
Ce service vous aide √† :
- Lire et comprendre **facilement** vos contrats
- Identifier les **doublons** de garanties
- Recevoir une **analyse IA claire et personnalis√©e**
""")
# Connexion s√©curis√©e √† l'API OpenAI via les secrets de Streamlit Cloud
client = OpenAI(api_key=st.secrets["openai_api_key"])

# Objectif de l'utilisateur
objectif = st.radio("üéØ Quel est votre objectif ?", [
    "üìâ R√©duire les co√ªts",
    "üìà Am√©liorer les prestations",
    "‚ùì Je ne sais pas encore"
])

# Situation professionnelle
travail = st.radio("üíº Travaillez-vous au moins 8h/semaine ?", ["Oui", "Non"], index=0)

# T√©l√©versement des contrats
uploaded_files = st.file_uploader(
    "üìÑ T√©l√©versez vos contrats PDF ou photos lisibles (JPG/PNG)",
    type=["pdf", "jpg", "jpeg", "png"],
    accept_multiple_files=True
)

if not uploaded_files:
    st.info("Veuillez t√©l√©verser au moins un contrat pour lancer l'analyse.")
    st.stop()
# Fonction de scoring utilisateur selon ses pr√©f√©rences et les prestations d√©tect√©es
def calculer_score_utilisateur(texte_pdf, preference):
    texte = texte_pdf.lower()
    score = {nom: 0 for nom in base_prestations}

    if "dentaire" in texte:
        for nom in score:
            if base_prestations[nom].get("dentaire", 0) >= 3000:
                score[nom] += 2

    if any(word in texte for word in ["priv√©e", "top liberty", "libero", "flex"]):
        for nom in score:
            if base_prestations[nom].get("hospitalisation", "").lower() in ["priv√©e", "top liberty", "libero", "flex"]:
                score[nom] += 2

    if "m√©decine alternative" in texte or "m√©decine naturelle" in texte:
        for nom in score:
            if base_prestations[nom]["m√©decine"]:
                score[nom] += 1

    if any(word in texte for word in ["check-up", "bilan sant√©", "fitness"]):
        for nom in score:
            if base_prestations[nom]["checkup"]:
                score[nom] += 1

    if any(word in texte for word in ["√©tranger", "√† l‚Äô√©tranger", "international"]):
        for nom in score:
            if base_prestations[nom]["etranger"]:
                score[nom] += 2

    if preference == "üìâ R√©duire les co√ªts":
        sorted_by_tarif = sorted(base_prestations.items(), key=lambda x: x[1].get("tarif", 9999))
        if sorted_by_tarif:
            score[sorted_by_tarif[0][0]] += 3
    elif preference == "üìà Am√©liorer les prestations":
        for nom in score:
            score[nom] += 1

    return sorted(score.items(), key=lambda x: x[1], reverse=True)

# D√©tection des doublons entre prestations des contrats
def detect_doublons_par_prestation(textes):
    prestations_reconnues = [
        "dentaire", "orthodontie", "lunettes", "optique", "hospitalisation",
        "priv√©e", "mi-priv√©e", "check-up", "m√©decine alternative", "√©tranger", "ambulance"
    ]
    groupes_prestations = []
    explications = []

    for index, texte in enumerate(textes):
        texte_base = texte.lower()
        groupe = set()

        for mot in prestations_reconnues:
            if mot in texte_base:
                groupe.add(mot)

        groupes_prestations.append((index + 1, groupe))

    doublons_intercontrats = []
    for i in range(len(groupes_prestations)):
        for j in range(i + 1, len(groupes_prestations)):
            communs = groupes_prestations[i][1].intersection(groupes_prestations[j][1])
            for c in communs:
                explications.append(
                    f"üîÅ Prestation ¬´ {c} ¬ª pr√©sente √† la fois dans le contrat {groupes_prestations[i][0]} et le contrat {groupes_prestations[j][0]}"
                )
                doublons_intercontrats.append(c)

    return list(set(doublons_intercontrats)), explications
if uploaded_files:
    contract_texts = []

    for i, file in enumerate(uploaded_files):
        st.subheader(f"üìÑ Contrat {i+1}")

        if file.type.startswith("image"):
            st.image(file, caption="Aper√ßu du fichier image")
            image = Image.open(file)
            text = pytesseract.image_to_string(image)
        else:
            buffer = BytesIO(file.read())
            doc = fitz.open(stream=buffer.read(), filetype="pdf")
            text = "\n".join(page.get_text() for page in doc)

        contract_texts.append(text)

    # D√©tection intelligente des doublons uniquement sur les prestations
    doublons_detect√©s, explications_doublons = detect_doublons_par_prestation(contract_texts)
    for i, texte in enumerate(contract_texts):
        with st.spinner("üß† Analyse IA du contrat en cours..."):
            prompt = f"""
Tu es un expert en assurance sant√© suisse. Analyse ce contrat en 3 sections :
1. LAMal : quels soins sont couverts ? Montants annuels et franchises ?
2. LCA : quelles prestations compl√©mentaires ? Limites ? Exemples (dentaire, lunettes, m√©decines douces‚Ä¶)
3. Hospitalisation : chambre, libre choix, etc.

Pr√©sente les r√©sultats en bullet points, ajoute des remarques si absence de LAMal ou LCA.
Fais une synth√®se finale avec une note sur 10 et un conseil.
Voici le contenu du contrat :
{texte[:3000]}
"""
            try:
                reponse = client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "Tu es un assistant IA expert et p√©dagogue."},
                        {"role": "user", "content": prompt}
                    ]
                )
                resultat = reponse.choices[0].message.content
            except Exception as e:
                st.error(f"Erreur IA : {e}")
                resultat = ""

        # D√©tection manuelle basique
        has_lamal = "lamal" in texte.lower()
        has_lca = any(m in texte.lower() for m in ["compl√©mentaire", "lca", "lunettes", "dentaire", "m√©decine alternative"])
        has_hospital = "hospitalisation" in texte.lower() or "chambre" in texte.lower()

        score = 0
        if has_lamal: score += 2
        if has_lca: score += 3
        if has_hospital: score += 1

        st.markdown("---")
        st.markdown(f"""
<div style='background-color:#eaf4ff;padding:1.5em;border-left: 5px solid #007BFF;border-radius:8px;margin-bottom:1em'>
<h3>üîé R√©sum√© global de l‚Äôanalyse du contrat {i+1}</h3>
<ul>
    <li><strong>LAMal d√©tect√©e :</strong> {"‚úÖ Oui" if has_lamal else "<span style='color:red;'>‚ùå Non</span>"}</li>
    <li><strong>Compl√©mentaire (LCA) d√©tect√©e :</strong> {"‚úÖ Oui" if has_lca else "<span style='color:red;'>‚ùå Non</span>"}</li>
    <li><strong>Hospitalisation :</strong> {"‚úÖ Oui" if has_hospital else "<span style='color:red;'>‚ùå Non</span>"}</li>
</ul>
<p style='font-size: 1.2em;'><strong>Note globale :</strong> {score}/10</p>
<p><em>Conseil :</em> {"Pensez √† compl√©ter votre couverture avec une LCA adapt√©e." if score < 6 else "Votre couverture sant√© est √©quilibr√©e."}</p>
</div>
""", unsafe_allow_html=True)

        st.markdown(f"### üßæ D√©tails de l‚Äôanalyse IA du Contrat {i+1}")
        st.markdown(resultat)
    # Doublons
    if len(contract_texts) > 1 and doublons_detect√©s:
        st.markdown("""
        <div style='background-color:#fff3cd;border-left:6px solid #ffa502;padding:1em;border-radius:10px;margin-top:1em;'>
        <h4>üîÅ Doublons d√©tect√©s entre les contrats</h4>
        <p>Des prestations similaires ont √©t√© rep√©r√©es dans plusieurs contrats compl√©mentaires :</p>
        <ul>
        """ + "".join([f"<li>{exp}</li>" for exp in explications_doublons]) + """
        </ul>
        <p><strong>Conseil :</strong> Supprimez les redondances pour √©viter de payer deux fois pour les m√™mes garanties.</p>
        </div>
        """, unsafe_allow_html=True)
    elif len(contract_texts) == 1 and doublons_detect√©s:
        st.markdown("""
        <div style='background-color:#fff3cd;border-left:6px solid #ffa502;padding:1em;border-radius:10px;margin-top:1em;'>
        <h4>üîÅ Doublons internes d√©tect√©s</h4>
        <p>Certains √©l√©ments apparaissent plusieurs fois dans ce contrat, veuillez v√©rifier :</p>
        <ul>
        """ + "".join([f"<li>{exp}</li>" for exp in explications_doublons]) + """
        </ul>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.success("‚úÖ Aucun doublon significatif d√©tect√© entre les contrats analys√©s.")

    # Chat IA
    st.markdown("---")
    st.subheader("üí¨ Posez une question √† l'assistant IA")
    question_utilisateur = st.text_area("√âcrivez votre question ici (ex : Que couvre mon assurance pour les lunettes ?)")
    if st.button("Obtenir une r√©ponse de l‚ÄôIA"):
        if question_utilisateur:
            try:
                reponse_chat = client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "Tu es un assistant expert en assurance suisse. Donne des r√©ponses claires et personnalis√©es selon les contrats analys√©s."},
                        {"role": "user", "content": f"Voici ce que contient mon contrat :\n{contract_texts[0][:2000]}\nEt voici ma question :\n{question_utilisateur}"}
                    ]
                )
                st.markdown("### üß† R√©ponse de l‚Äôassistant IA")
                st.markdown(reponse_chat.choices[0].message.content)
            except Exception as e:
                st.error(f"Erreur IA lors de la r√©ponse : {e}")
        else:
            st.warning("Veuillez √©crire une question avant de soumettre.")

    # Footer + email
    st.markdown("---")
    st.markdown("üì´ Pour toute question : [info@monfideleconseiller.ch](mailto:info@monfideleconseiller.ch)")

    # Envoi des fichiers
    for i, file in enumerate(uploaded_files):
        try:
            file.seek(0)
            msg = EmailMessage()
            msg["Subject"] = f"Analyse contrat sant√© - Contrat {i+1}"
            msg["From"] = st.secrets["email_user"]
msg["To"] = st.secrets["email_user"]
msg.set_content("Une analyse IA a √©t√© effectu√©e. Voir fichier en pi√®ce jointe.")
msg.add_attachment(file.read(), maintype='application', subtype='pdf', filename=f"contrat_{i+1}.pdf")

with smtplib.SMTP_SSL("smtp.hostinger.com", 465) as smtp:
    smtp.login(st.secrets["email_user"], st.secrets["email_password"])
    smtp.send_message(msg)
                smtp.send_message(msg)
        except Exception as e:
            st.warning(f"üì® Erreur lors de l'envoi de l'email pour le contrat {i+1} : {e}")
