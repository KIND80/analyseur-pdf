import streamlit as st
import fitz  # PyMuPDF
from openai import OpenAI
from fpdf import FPDF
from io import BytesIO
from PIL import Image
import pytesseract
import re

# Donn√©es enrichies pour la comparaison
base_prestations = {
    "Assura": {"dentaire": 1500, "hospitalisation": "Mi-priv√©e", "m√©decine": True, "checkup": False, "etranger": False},
    "Sympany": {"dentaire": 5000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True, "etranger": True},
    "Groupe Mutuel": {"dentaire": 10000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True, "etranger": True},
    "Visana": {"dentaire": 8000, "hospitalisation": "Flex", "m√©decine": True, "checkup": True, "etranger": True},
    "Concordia": {"dentaire": 2000, "hospitalisation": "LIBERO", "m√©decine": True, "checkup": True, "etranger": True},
    "SWICA": {"dentaire": 3000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True, "etranger": True},
    "Helsana": {"dentaire": 10000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True, "etranger": True},
    "CSS": {"dentaire": 4000, "hospitalisation": "Priv√©e", "m√©decine": True, "checkup": True, "etranger": True},
    "Sanitas": {"dentaire": 4000, "hospitalisation": "Top Liberty", "m√©decine": True, "checkup": True, "etranger": True},
}
def calculer_score_utilisateur(texte_pdf, preference):
    texte = texte_pdf.lower()
    score = {nom: 0 for nom in base_prestations}

    if "lamal" in texte:
        for nom in score:
            score[nom] += 2  # base pr√©sente

    if "compl√©mentaire" in texte or "lca" in texte:
        for nom in score:
            score[nom] += 3

    if "hospitalisation" in texte or "priv√©e" in texte or "mi-priv√©e" in texte:
        for nom in score:
            score[nom] += 1

    if any(term in texte for term in ["dentaire", "lunettes", "orthodontie", "fitness"]):
        for nom in score:
            score[nom] += 1

    if "etranger" in texte or "√† l‚Äô√©tranger" in texte:
        for nom in score:
            if base_prestations[nom].get("etranger"):
                score[nom] += 1

    if preference == "üìâ R√©duire les co√ªts":
        score["Assura"] += 2
    elif preference == "üìà Am√©liorer les prestations":
        for nom in score:
            score[nom] += 1

    return sorted(score.items(), key=lambda x: x[1], reverse=True)
def detect_doublons_prestations(contrats_textes):
    prestations_reconnues = [
        "dentaire", "orthodontie", "hospitalisation", "lunettes", "m√©decine naturelle", "m√©decine alternative",
        "check-up", "fitness", "chambre priv√©e", "soins √† l'√©tranger", "ophtalmologie", "psychoth√©rapie"
    ]

    doublons = []
    contrat_prestations = []

    for texte in contrats_textes:
        texte_lower = texte.lower()
        prestations = [presta for presta in prestations_reconnues if presta in texte_lower]
        contrat_prestations.append(set(prestations))

    for i in range(len(contrat_prestations)):
        for j in range(i + 1, len(contrat_prestations)):
            commun = contrat_prestations[i].intersection(contrat_prestations[j])
            if commun:
                doublons.append({
                    "entre": f"Contrat {i+1} et Contrat {j+1}",
                    "prestations": list(commun)
                })

    return doublons
def generer_feedback_score(note, a_lamal):
    if not a_lamal:
        return """
<div style='background-color:#ffdddd;padding:1em;border-radius:10px;border-left:5px solid red;margin-top:1em;'>
<b>‚ö†Ô∏è Absence de LAMal d√©tect√©e</b><br>
Vous ne semblez pas avoir d‚Äôassurance de base (LAMal), ce qui est pourtant obligatoire en Suisse. Veuillez v√©rifier aupr√®s de votre assureur ou conseiller.
</div>
"""

    if note <= 3:
        return """
<div style='background-color:#ffe5e5;padding:1em;border-radius:10px;border-left:5px solid #e74c3c;margin-top:1em;'>
<b>Couverture faible :</b> Vous disposez du minimum l√©gal. Pensez √† compl√©ter votre assurance avec des prestations compl√©mentaires pour une meilleure protection.
</div>
"""
    elif note <= 5:
        return """
<div style='background-color:#fff3cd;padding:1em;border-radius:10px;border-left:5px solid #f1c40f;margin-top:1em;'>
<b>Couverture moyenne :</b> Vous √™tes partiellement prot√©g√©. Des options peuvent encore √™tre envisag√©es selon vos besoins sp√©cifiques.
</div>
"""
    else:
        return """
<div style='background-color:#d4edda;padding:1em;border-radius:10px;border-left:5px solid #28a745;margin-top:1em;'>
<b>Bonne couverture :</b> Vous b√©n√©ficiez d‚Äôune assurance sant√© √©quilibr√©e incluant base + compl√©mentaires + hospitalisation.
</div>
"""

    # V√©rification LAMal
    a_lamal = any("lamal" in t.lower() or "base" in t.lower() for t in textes)
    note_globale = 0
    if a_lamal:
        note_globale += 2
    if any("compl√©mentaire" in t.lower() or "lca" in t.lower() for t in textes):
        note_globale += 3
    if any("hospitalisation" in t.lower() for t in textes):
        note_globale += 1
    if any(mot in t.lower() for t in textes for mot in ["dentaire", "fitness", "lunettes", "√©tranger"]):
        note_globale += 1
    note_globale = min(7, note_globale)

    st.markdown(f"""
    <div style='background-color:#f4f4f4;padding:1em;border-radius:10px;margin-top:1em;'>
    <strong>üßæ Note globale de votre couverture sant√© :</strong> {note_globale}/10
    <br><small>Bas√© sur la pr√©sence de LAMal, compl√©mentaire et hospitalisation.</small>
    </div>
    """, unsafe_allow_html=True)

    st.markdown(generer_feedback_score(note_globale, a_lamal), unsafe_allow_html=True)

    doublons, explications = detect_doublons_contenu(textes)
    if explications:
        st.markdown("""
        <div style='background-color:#fff3cd;border-left:6px solid #ffa502;padding:1em;border-radius:10px;margin-top:1em;'>
        <h4>üîÅ Doublons d√©tect√©s</h4>
        <ul>""" + "".join(f"<li>{e}</li>" for e in explications) + """</ul>
        <p><strong>Suggestion :</strong> V√©rifiez vos prestations pour √©viter de payer deux fois pour la m√™me couverture (ex. dentaire, hospitalisation).</p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.success("‚úÖ Aucun doublon critique d√©tect√©.")

    # Assistant IA interactif
    st.markdown("---")
    st.subheader("üí¨ Posez une question √† l'IA")
    user_q = st.text_area("Posez une question √† propos de votre contrat ou vos droits")
    if st.button("Obtenir une r√©ponse IA"):
        if user_q:
            try:
                rep = client.chat.completions.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "Tu es un conseiller IA expert en assurance sant√© suisse, bienveillant, utile et pr√©cis."},
                        {"role": "user", "content": user_q}
                    ]
                )
                st.markdown(rep.choices[0].message.content)
            except Exception as e:
                st.error("Erreur IA : r√©ponse non obtenue.")
        else:
            st.warning("√âcrivez une question avant d'envoyer.")

    st.markdown("---")
    st.info("üì© Une question ? √âcrivez-nous : info@monfideleconseiller.ch")
